import os
import json
import httpx
from bs4 import BeautifulSoup
from urllib.parse import unquote
from fastapi import FastAPI, Request

app = FastAPI()

KEITARO_API_KEY = os.getenv("KEITARO_API_KEY")
KEITARO_BASE_URL = os.getenv("KEITARO_BASE_URL")

AFFILIATE_NETWORKS = {
    "ExGaming": 54,
    "Glory Partners": 14,
    "4RA PARTNER": 17
}

@app.get("/")
async def root():
    return {"message": "Server is running."}

@app.post("/jira-to-keitaro")
async def jira_to_keitaro(request: Request):
    body = await request.json()
    issue = body.get("issue", {})
    description = issue.get("fields", {}).get("description", "")
    parsed_data = parse_offer_description(description)

    if not parsed_data:
        return {"message": "No valid offer data found in Jira issue."}

    created_offers = []
    for offer in parsed_data:
        response = await create_keitaro_offer(offer)
        created_offers.append(response)

    return {"message": "Offers processed.", "results": created_offers}


def parse_offer_description(text):
    try:
        soup = BeautifulSoup(text, "html.parser")
        lines = [line.strip() for line in soup.get_text().splitlines() if line.strip()]

        print("üì• –í—Å–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ –∑–∞–¥–∞—á–∏ Jira:")
        for idx, l in enumerate(lines):
            print(f"{idx + 1}: {l}")

        offer_data = {
            "id": "", "product": "", "geo": "", "payout": "",
            "currency": "", "cap": "", "source": "", "buyer": "", "pp": ""
        }

        for line in lines:
            if line.startswith("id_prod{"):
                offer_data["id"] = line.split("{")[1].split("}")[0]
            elif line.startswith("–ü—Ä–æ–¥—É–∫—Ç:"):
                offer_data["product"] = line.replace("–ü—Ä–æ–¥—É–∫—Ç:", "").strip()
            elif line.startswith("–ì–µ–æ:"):
                offer_data["geo"] = line.replace("–ì–µ–æ:", "").strip().upper()
            elif line.startswith("–°—Ç–∞–≤–∫–∞:"):
                offer_data["payout"] = line.replace("–°—Ç–∞–≤–∫–∞:", "").strip()
            elif line.startswith("–í–∞–ª—é—Ç–∞:"):
                offer_data["currency"] = line.replace("–í–∞–ª—é—Ç–∞:", "").strip()
            elif line.startswith("–ö–∞–ø–∞:"):
                offer_data["cap"] = line.replace("–ö–∞–ø–∞:", "").strip()
            elif line.startswith("–°–æ—Ä—Å:"):
                offer_data["source"] = line.replace("–°–æ—Ä—Å:", "").strip()
            elif line.startswith("–ë–∞–µ—Ä:"):
                offer_data["buyer"] = line.replace("–ë–∞–µ—Ä:", "").strip()
            elif line.startswith("–ü–ü:"):
                offer_data["pp"] = line.replace("–ü–ü:", "").strip()

        print("\nüßæ –°–ø–∞—Ä—à–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
        for k, v in offer_data.items():
            print(f"{k}: {v}")

        offers = []
        for i in range(1, len(lines)):
            line = lines[i]
            if "http" in line:
                label = lines[i - 1]

                # ‚úÖ –û—á–∏—Å—Ç–∫–∞ –∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏
                raw_url = line.strip("[]").split("|")[0]
                clean_url = unquote(
                    raw_url.replace("‚äÇ_id", "&sub_id")  # üí° —Ñ–∏–∫—Å–∏—Ä—É–µ–º –ª–æ–º–∞–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏
                )

                try:
                    payout_value = float(offer_data["payout"])
                except ValueError:
                    print(f"‚ùå –û—à–∏–±–∫–∞: —Å—Ç–∞–≤–∫–∞ ('–°—Ç–∞–≤–∫–∞') –Ω–µ —á–∏—Å–ª–æ: {offer_data['payout']}")
                    continue

                offer = {
                    "name": f"id_prod{{{offer_data['id']}}} - –ü—Ä–æ–¥—É–∫—Ç: {offer_data['product']} –ì–µ–æ: {offer_data['geo']} "
                            f"–°—Ç–∞–≤–∫–∞: {offer_data['payout']} –í–∞–ª—é—Ç–∞: {offer_data['currency']} –ö–∞–ø–∞: {offer_data['cap']} "
                            f"–°–æ—Ä—Å: {offer_data['source']} –ë–∞–µ—Ä: {offer_data['buyer']} - {label}",
                    "action_payload": clean_url,
                    "country": [offer_data["geo"]],
                    "notes": "",
                    "action_type": "http",
                    "offer_type": "external",
                    "conversion_cap_enabled": False,
                    "daily_cap": 0,
                    "conversion_timezone": "UTC",
                    "alternative_offer_id": 0,
                    "values": "",
                    "payout_value": payout_value,
                    "payout_currency": offer_data["currency"],
                    "payout_type": "",
                    "payout_auto": False,
                    "payout_upsell": False,
                    "affiliate_network_id": AFFILIATE_NETWORKS.get(offer_data["pp"], 0),
                }
                print(f"\n‚úÖ –û—Ñ—Ñ–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω: {offer['name']}")
                offers.append(offer)

        if not offers:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–∞–ª–∏–¥–Ω–æ–≥–æ –æ—Ñ—Ñ–µ—Ä–∞.")
        return offers

    except Exception as e:
        print("‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∑–∞–¥–∞—á–∏ Jira:", str(e))
        print("üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–¥–∞—á–∏:\n", text)
        return []


async def create_keitaro_offer(offer_data):
    url = KEITARO_BASE_URL
    headers = {
        "API-KEY": KEITARO_API_KEY,
        "Content-Type": "application/json"
    }

    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(url, headers=headers, json=offer_data)
            print("üì¶ –û—Ç–≤–µ—Ç –æ—Ç Keitaro:", response.status_code, response.text)
            return {
                "status_code": response.status_code,
                "response": response.text
            }
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ñ—Ñ–µ—Ä–∞ –≤ Keitaro:", str(e))
        return {
            "status_code": 500,
            "response": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ñ—Ñ–µ—Ä–∞: {str(e)}"
        }
